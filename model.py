# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_model')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_model')
    _model = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_model', [dirname(__file__)])
        except ImportError:
            import _model
            return _model
        try:
            _mod = imp.load_module('_model', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _model = swig_import_helper()
    del swig_import_helper
else:
    import _model
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def rand_doubleRange(a, b):
    return _model.rand_doubleRange(a, b)
rand_doubleRange = _model.rand_doubleRange

def min(x, y, z):
    return _model.min(x, y, z)
min = _model.min

def compute(result, inputs):
    return _model.compute(result, inputs)
compute = _model.compute

def model():
    return _model.model()
model = _model.model
# This file is compatible with both classic and new-style classes.

cvar = _model.cvar
output_length = cvar.output_length
results_size = cvar.results_size
n_x = cvar.n_x
n_y = cvar.n_y
num_gen = cvar.num_gen
num_inputs = cvar.num_inputs
num_outputs = cvar.num_outputs
x_index = cvar.x_index
y_index = cvar.y_index
z_index = cvar.z_index
motor_index_list = cvar.motor_index_list
n_engines_list = cvar.n_engines_list
motor_model_list = cvar.motor_model_list
L_motor_list = cvar.L_motor_list
D_motor_list = cvar.D_motor_list
W_motor_list = cvar.W_motor_list
prop_motor_rpm_rated_list = cvar.prop_motor_rpm_rated_list
prop_motor_torque_rated_list = cvar.prop_motor_torque_rated_list
motor_cont_torque_list = cvar.motor_cont_torque_list
motor_peak_torque_list = cvar.motor_peak_torque_list
motor_rate_current_list = cvar.motor_rate_current_list
motor_voltage_list = cvar.motor_voltage_list
battery_index_list = cvar.battery_index_list
battery_model_list = cvar.battery_model_list
cell_cap_list = cvar.cell_cap_list
cell_volt_list = cvar.cell_volt_list
max_discharge_list = cvar.max_discharge_list
cell_weight_list = cvar.cell_weight_list
cell_constant_list = cvar.cell_constant_list
batt_series_list = cvar.batt_series_list
batt_parallel_list = cvar.batt_parallel_list
b_h_list = cvar.b_h_list
c_root_list = cvar.c_root_list
c_tip_list = cvar.c_tip_list
L_f_list = cvar.L_f_list
R_list = cvar.R_list
alpha_list = cvar.alpha_list
MDTW_list = cvar.MDTW_list
r_list = cvar.r_list
condition_list = cvar.condition_list
pi = cvar.pi

